
import { serverSupabaseClient, serverSupabaseServiceRole } from '#supabase/server'


export default defineEventHandler(async (event) => {
  // üîç DEBUG: Verificar variables de entorno
  console.log('üîç Variables de entorno disponibles:', {
    openaiApiKey: !!useRuntimeConfig().openaiApiKey,
    supabaseUrl: !!useRuntimeConfig().public.supabaseUrl,
    supabaseAnonKey: !!useRuntimeConfig().public.supabaseAnonKey,
    nodeEnv: process.env.NODE_ENV
  })

  try {
    const body = await readBody(event)
    const { entryData, userProfile, entryId } = body

    // Validaciones
    if (!entryData || !userProfile) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Datos insuficientes para generar consejo'
      })
    }

    const config = useRuntimeConfig()
    
    if (!config.openaiApiKey) {
      throw createError({
        statusCode: 500,
        statusMessage: 'API Key de OpenAI no configurada'
      })
    }

    // NUEVO: Obtener t√©cnicas recomendadas ANTES de generar el consejo
    let recommendedTechniques: any[] = []
    let mainEmotions: string[] = []
    
    try {
      console.log('üîç Intentando conectar con Supabase...')
      console.log('üîç Funciones disponibles:', {
        serverSupabaseClient: typeof serverSupabaseClient,
        serverSupabaseServiceRole: typeof serverSupabaseServiceRole
      })
      
      // PROBAR AMBOS M√âTODOS:
      let supabase
      try {
        supabase = serverSupabaseServiceRole(event)
        console.log('‚úÖ Usando serverSupabaseServiceRole')
      } catch (serviceRoleError) {
        console.log('‚ö†Ô∏è ServiceRole fall√≥, intentando client normal...')
        supabase = await serverSupabaseClient(event)
        console.log('‚úÖ Usando serverSupabaseClient')
      }
      
      console.log('üîç Cliente Supabase tipo:', typeof supabase)
      console.log('üîç M√©todos disponibles:', Object.keys(supabase))
      
      // Extraer emociones principales (top 2)
      mainEmotions = entryData.emotions
        .slice(0, 2) // Top 2 emociones m√°s fuertes
        .map((emotion: any) => emotion.label.toLowerCase())
      
      console.log('üéØ Emociones principales detectadas:', mainEmotions)
      
      // Buscar t√©cnicas recomendadas basadas en las emociones
      const { data: techniques, error: techniqueError } = await supabase
        .from('therapeutic_techniques')
        .select('*')
        .overlaps('target_emotions', mainEmotions)
        .eq('evidence_level', 'high') // Solo t√©cnicas con alta evidencia
        .lte('difficulty_level', 3) // T√©cnicas no muy complejas
        .order('difficulty_level', { ascending: true })
        .limit(3) // M√°ximo 3 t√©cnicas

      if (techniqueError) {
        console.error('‚ö†Ô∏è Error obteniendo t√©cnicas:', techniqueError)
      } else {
        recommendedTechniques = techniques || []
        console.log(`üí° ${recommendedTechniques.length} t√©cnicas encontradas para emociones:`, mainEmotions)
      }
    } catch (techniquesFetchError) {
      console.error('‚ö†Ô∏è Error conectando con BD para t√©cnicas:', techniquesFetchError)
      // Continuar sin t√©cnicas si hay error
    }

    // NUEVO: Crear prompt enriquecido con t√©cnicas espec√≠ficas
    let techniquesSection = ''
    if (recommendedTechniques.length > 0) {
      techniquesSection = `

üìã T√âCNICAS TERAP√âUTICAS ESPEC√çFICAS DISPONIBLES:
${recommendedTechniques.map((t, index) => `
${index + 1}. ${t.name} (${t.category.replace('_', ' ')})
   Descripci√≥n: ${t.description}
   Instrucciones: ${t.instructions.replace(/\n/g, ' ').substring(0, 200)}...
   Nivel de evidencia: ${t.evidence_level}
   Duraci√≥n: ${t.duration_minutes} minutos
`).join('')}`
    }

    // ACTUALIZADO: Prompt del sistema mejorado
    const systemPrompt = `Eres un coach de bienestar mental especializado que combina empat√≠a con t√©cnicas terap√©uticas basadas en evidencia cient√≠fica. Tu objetivo es brindar consejos pr√°cticos utilizando las t√©cnicas espec√≠ficas proporcionadas.

DIRECTRICES PARA EL COACH IA:
- Utiliza las t√©cnicas terap√©uticas espec√≠ficas proporcionadas como base principal
- Adapta las instrucciones de las t√©cnicas al contexto emocional actual del usuario
- Mant√©n un tono c√°lido, emp√°tico pero profesional como un coach personal
- Estructura tu respuesta de forma clara y accionable
- Explica brevemente POR QU√â estas t√©cnicas son efectivas para su situaci√≥n
- Personaliza el lenguaje seg√∫n el perfil del usuario
- Si no hay t√©cnicas espec√≠ficas, usa principios generales de CBT y mindfulness
- M√°ximo 3-4 p√°rrafos enfocados en la acci√≥n
- Si detectas crisis severa, recomienda ayuda profesional inmediata`

    // Construir informaci√≥n del usuario para contexto
    const userContext = []
    if (userProfile.age) userContext.push(`${userProfile.age} a√±os`)
    if (userProfile.gender && userProfile.gender !== 'prefiero_no_decir') {
      userContext.push(`g√©nero ${userProfile.gender}`)
    }
    if (userProfile.psychological_conditions?.length > 0) {
      userContext.push(`condiciones relevantes: ${userProfile.psychological_conditions.join(', ')}`)
    }

    // Preparar informaci√≥n de emociones
    const emotionsText = entryData.emotions
      .map((emotion: any) => `${emotion.translated || emotion.label}: ${Math.round(emotion.score * 100)}%`)
      .join(', ')

    // ACTUALIZADO: Prompt del usuario enriquecido con t√©cnicas
    const userPrompt = `CONTEXTO DEL USUARIO:
Usuario${userContext.length > 0 ? ` (${userContext.join(', ')})` : ''} reporta:

üéØ SITUACI√ìN DESENCADENANTE: "${entryData.trigger}"
üé≠ EMOCIONES DETECTADAS: ${emotionsText}
‚ö° NIVEL DE ENERG√çA: ${entryData.energyLevel}/10
${techniquesSection}

INSTRUCCIONES PARA EL COACH:
Como coach personal especializado, proporciona un consejo personalizado que:
1. Reconozca y valide las emociones actuales del usuario
2. Utilice las t√©cnicas espec√≠ficas proporcionadas arriba adapt√°ndolas a su situaci√≥n
3. Explique brevemente por qu√© estas t√©cnicas son efectivas para su estado emocional actual
4. D√© pasos claros y espec√≠ficos que pueda seguir inmediatamente
5. Sea alentador y emp√°tico en el tono

${recommendedTechniques.length > 0 ? 
'IMPORTANTE: Basa tu consejo principalmente en las t√©cnicas listadas arriba, adaptando sus instrucciones al contexto espec√≠fico del usuario.' : 
'IMPORTANTE: Como no hay t√©cnicas espec√≠ficas disponibles, usa principios generales de terapia cognitivo-conductual y mindfulness.'
}`

    console.log('ü§ñ Generando consejo personalizado con t√©cnicas espec√≠ficas...')

    // Llamada a OpenAI (misma estructura que antes)
    const response = await $fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: {
        model: 'gpt-4o-mini', // Modelo actualizado
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userPrompt
          }
        ],
        max_tokens: 600, // Aumentado para incluir t√©cnicas
        temperature: 0.7
      }
    })

    const advice = response.choices[0].message.content

    // ACTUALIZADO: Si se proporciona entryId, actualizar la entrada en Supabase (misma estructura que antes)
    if (entryId) {
      const supabase = await serverSupabaseClient(event) // CAMBIADO: usar serverSupabaseClient
      
      const { error: updateError } = await supabase
        .from('mood_entries')
        .update({
          advice: advice,
          advice_generated_at: new Date().toISOString(),
          recommended_techniques: recommendedTechniques.map(t => t.id) // NUEVO: Guardar IDs de t√©cnicas
        })
        .eq('id', entryId)

      if (updateError) {
        console.error('Error actualizando entrada:', updateError)
        // No lanzamos error aqu√≠ para no fallar la generaci√≥n del consejo
      } else {
        console.log('‚úÖ Consejo y t√©cnicas guardados en base de datos')
      }
    }

    // ACTUALIZADO: Retorna tanto el consejo como las t√©cnicas recomendadas
    return {
      success: true,
      data: {
        advice: advice,
        recommended_techniques: recommendedTechniques, // NUEVO: Incluir t√©cnicas completas
        techniques_count: recommendedTechniques.length,
        emotions_analyzed: mainEmotions,
        generated_at: new Date().toISOString()
      }
    }

  } catch (error: any) {
    console.error('‚ùå Error generando consejo:', error)
    
    // Manejo espec√≠fico de errores de OpenAI (mismo que antes)
    if (error.status === 401) {
      throw createError({
        statusCode: 500,
        statusMessage: 'Error de autenticaci√≥n con OpenAI'
      })
    } else if (error.status === 429) {
      throw createError({
        statusCode: 429,
        statusMessage: 'L√≠mite de API alcanzado. Intenta de nuevo en unos minutos.'
      })
    } else if (error.status === 500) {
      throw createError({
        statusCode: 502,
        statusMessage: 'Error en el servicio de OpenAI'
      })
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: error.message || 'Error interno del servidor'
    })
  }
})